global
    tune.ssl.default-dh-param 2048
    log 127.0.0.1:{{ (ds "data").haproxy_logging_port }} local0

# Default timeouts
defaults
    log global
    timeout connect         10s
    timeout client          1m
    timeout server          1m

# This captures alpn traffic on the https port and forwards the ACME validation requests to acme.sh
# and normal https requests to the app servers.
frontend alpn
    mode tcp
    bind :{{ (ds "data").https_port }}
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    use_backend acme if { req.ssl_alpn acme-tls/1 }
    default_backend bk_https

# This forwards traffic to acme.sh for certificate verification
backend acme
    {{ if (ds "data").leader_ip }}
    server acme.sh {{ (ds "data").leader_ip }}:{{ (ds "data").https_port }}
    {{else}}
    server acme.sh 127.0.0.1:{{ (ds "data").internal_acme_port }}
    {{end}}

# Caputres traffic from the alpn frontend and forwards it to the https frontend
backend bk_https
    server https 127.0.0.1:{{ (ds "data").internal_https_port }} send-proxy-v2

# Set default HTTP/HTTPS configuration
defaults
    mode http
    option forwardfor
    log global
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s

# This is a normal HTTP traffic frontend that may redirect to https or just forward on through
# depending on the app.
frontend http
    bind :{{ (ds "data").http_port }}

    {{range (ds "data").virtual_hosts}}
    {{if .application_name}}
    acl is_{{ .application_name }} hdr(Host) {{ .domain }}
    {{ if .force_https }}
    redirect scheme https if is_{{.application_name}}
    {{else}}
    use_backend {{ .application_name }} if is_{{ .application_name }}
    {{{end}}}
    {{end}}
    {{end}}

# This is the HTTPS traffic frontend
frontend https
    bind 127.0.0.1:{{ (ds "data").internal_https_port }}  ssl crt /usr/local/etc/haproxy/certs accept-proxy

    {{ range (ds "data").virtual_hosts}}
    {{ if .application_name }}
    {{ if .enable_https }}
    acl is_{{ .application_name }} hdr(Host) {{ .domain }}
    use_backend {{ .application_name }} if is_{{ .application_name}}
    {{end}}
    {{end}}
    {{end}}

# Backend defaults
defaults
    mode http
    balance roundrobin
    log global
    timeout connect         10s
    timeout client          1m
    timeout server          1m

# Application-specific backends

{{ range (ds "data").virtual_hosts }}
{{ if .application_name }}
backend {{ .application_name }}
    # TODO: Make the healthcheck interval configurable
    {{ range .endpoints }}
    server {{ strings.ReplaceAll "/" "_" .unit_name }} {{ .hostname }}:{{ .port }} check inter 10s
    {{end}}
{{end}}
{{end}}

